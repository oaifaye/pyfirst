'''
    顾名思义，linalg=linear+algebralinalg=linear+algebra，线性代数
'''
import numpy as np

#normnorm则表示范数，首先需要注意的是范数是对向量（或者矩阵）的度量，是一个标量
#x表示要度量的向量，ord表示范数的种类(一范数、二范数...、np.inf无穷范数max(|xi|))
x = np.array([[1,1,1],[1,1,1]])
print("默认参数(矩阵2范数，不保留矩阵二维特性)：",str(np.linalg.norm(x,ord=2)))
print("矩阵每个行向量求向量的2范数：",str(np.linalg.norm(x,ord=2,axis=1,keepdims=True)))

#逆矩阵：inv
x = np.array([[1,2,3], [4,5,6],[7,8,9]])
print("逆矩阵：:",str(np.linalg.inv(x)))

#广义逆矩阵：inv
x = np.array([[1,2,3], [4,5,6],[7,8,9]])
print("广义逆矩阵：:",str(np.linalg.pinv(x)))

#解形如AX=b的线性方程组：np.linalg.solve(A,b)
A = np.array([[1,2], [3,4]])
b = np.array([6,7])
print("解线性方程组：:",str(np.linalg.solve(A,b)))

#行列式：det
print("行列式：:",str(np.linalg.det(x)))

#估计线性模型中的系数。返回元组，元组中四个元素，第一元素表示所求的最小二乘解，第二个元素表示残差总和，第三个元素表示X矩阵秩，第四个元素表示X的奇异值
x = np.array([[1, 6, 2,1,3], [1, 8, 1,1,5], [1, 10, 0,1,4], [1, 14, 2,1,3], [1, 18, 0,1,3]])
b= np.array([[7], [9], [13], [17.5], [18]])
print(np.linalg.lstsq(x, b))

#特征向量特征值
def testeig():
    data = [
            [1,1,1],
            [2,2,2],
            [3,3,3]
            ]
    eigVals,eigVects=np.linalg.eig(np.mat(data))
    print('eigVals:',eigVals)
    print('eigVects:',eigVects)

#范数矩阵,以欧氏距离为例
def testnorm():
    a = np.array([
         [1,2,3,4,5],
         [6,7,8,9,10],
         [11,12,13,14,15]
         ])
    b = np.array([
         [10,20,30,40,50],
         [10,20,30,40,50],
         [10,20,30,40,50]
         ])
    c = a-b
    #ord:2范数,axis:对每行求范数
    z = np.linalg.norm(c,ord=2,axis=1)
    print('范数mean:',len(z))
    print('范数min:',z.min())
    
#范数矩阵,以欧氏距离为例
def testnorm1():
    a = np.array([
         [-1.19953334e-01,-2.41942704e-04,1.65653899e-02,-5.63351586e-02,-1.28023326e-01,-5.28322570e-02,-3.11786663e-02,-1.13890782e-01,1.02199167e-01,-1.59833103e-01,1.70113936e-01,-1.06479660e-01,-2.52332896e-01,-1.82384476e-02,-8.80658627e-02,2.04974532e-01,-1.87697306e-01,-1.61005393e-01,-6.79152086e-02,-2.79749706e-02,5.85465580e-02,3.97071578e-02,-4.77756746e-02,2.23573577e-03,-1.33216277e-01,-3.53615701e-01,-9.05927345e-02,7.80196860e-04,-4.51210588e-02,-4.51142453e-02,-1.70300975e-02,1.22903340e-01,-1.73119754e-01,-3.53876837e-02,9.32281390e-02,1.32427305e-01,3.26062068e-02,-4.43763994e-02,1.68568343e-01,1.96292326e-02,-2.71760970e-01,3.86709534e-03,1.36615217e-01,2.36998484e-01,1.25284895e-01,1.59564689e-02,-1.73198245e-02,-1.64822519e-01,1.34519130e-01,-1.59516245e-01,-2.81699616e-02,1.34555012e-01,6.42406791e-02,6.08146861e-02,-2.24166550e-02,-1.32839963e-01,5.68172969e-02,1.23950310e-01,-1.66778833e-01,-5.17179966e-02,1.28691688e-01,-1.02936022e-01,-4.96843457e-02,-1.05497219e-01,1.38481051e-01,4.92444150e-02,-9.43896249e-02,-2.47490987e-01,1.29602090e-01,-1.96180627e-01,-7.57469237e-02,6.24319464e-02,-1.08444519e-01,-1.48603410e-01,-3.06228131e-01,-8.00826997e-02,3.45882744e-01,8.42155144e-02,-1.42120749e-01,4.84484062e-02,-8.91259219e-03,-2.27561817e-02,1.49024174e-01,1.20062508e-01,-2.62631476e-03,6.10172078e-02,-6.90727234e-02,5.79662155e-03,2.52187699e-01,-1.40579659e-02,-1.79548748e-02,1.37534529e-01,2.14498863e-02,5.80016002e-02,6.54281452e-02,3.05199381e-02,-1.13173708e-01,1.83015056e-02,-1.51100010e-01,-3.62597825e-03,-2.97026243e-02,-4.77634557e-02,4.72966582e-04,1.11432500e-01,-1.35754153e-01,1.84326872e-01,-2.87326481e-02,1.77740455e-02,-1.76046602e-02,-1.45118535e-02,-6.18831664e-02,-3.05834357e-02,1.18548900e-01,-2.14912117e-01,1.29163578e-01,1.75263792e-01,3.27937566e-02,1.10850766e-01,1.09856576e-01,7.01503605e-02,-6.98155165e-02,1.85211487e-02,-2.58700967e-01,-5.43455817e-02,6.70633912e-02,-7.71910548e-02,1.03550240e-01,-3.55931483e-02],
         ])
    b = np.array([
         [-0.04385196,0.04184407,0.03645824,-0.03226125,-0.05309033,-0.05190517,-0.06171044,-0.14571704,0.08873703,-0.08743737,0.17245784,-0.07445265,-0.16977969,-0.13351583,-0.00701042,0.17396684,-0.18296881,-0.13926364,-0.01488565,-0.02600784,0.08247522,-0.0181221,-0.02867143,0.03499777,-0.12555698,-0.33879817,-0.09800334,-0.04387142,0.02154798,-0.01597284,-0.09346285,0.11447049,-0.15374811,-0.06314703,0.06352745,0.12098753,0.03078038,-0.06237172,0.10858642,-0.01748735,-0.1964301,0.01191488,0.10720818,0.22870284,0.26398861,0.09339843,0.02112574,-0.05960978,0.12790267,-0.13268352,-0.01342729,0.0713971,0.09755586,0.08116911,-0.01146508,-0.16036399,0.04965535,0.04142198,-0.17526814,-0.00985744,0.050902,-0.17021428,-0.00376371,-0.03176684,0.23038314,0.03045859,-0.09839634,-0.18594845,0.1185278,-0.20448467,-0.08882467,0.01576377,-0.13763724,-0.11161278,-0.36066252,-0.02147459,0.34289125,0.11658712,-0.18498012,0.07445296,0.01824275,0.01517862,0.16173704,0.14730906,-0.00631122,0.03701235,-0.11854853,-0.05310939,0.24349378,-0.03265437,-0.05006882,0.19188711,-0.03292121,0.07381383,0.04281552,0.0323684,-0.05950159,0.06089289,-0.0988094,-0.02759551,0.06093291,-0.04527798,0.0413498,0.14376065,-0.15363316,0.1251245,-0.0454864,0.09755777,0.01787683,-0.01937489,-0.1086037,-0.05970222,0.11130637,-0.24576972,0.12545237,0.21456814,0.06304976,0.10267965,0.09586366,0.07887276,-0.01157922,0.00049438,-0.19901705,-0.03343354,0.0742736,-0.04601542,0.11399983,0.04144385],
         ])
    c = a-b
    #ord:2范数,axis:对每行求范数
    z = np.linalg.norm(c,ord=2,axis=1)
    print('范数mean:',len(z))
    print('范数min:',z.min())

# testeig()
testnorm1()
